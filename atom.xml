<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Avery&#39;s blog</title>
  
  <subtitle>外接海馬體連線中...</subtitle>
  <link href="https://avery210412.github.io/atom.xml" rel="self"/>
  
  <link href="https://avery210412.github.io/"/>
  <updated>2022-04-02T05:27:52.110Z</updated>
  <id>https://avery210412.github.io/</id>
  
  <author>
    <name>Avery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[JS101] JavaScript 運算子（operator）</title>
    <link href="https://avery210412.github.io/javascript/20220401/1062980384/"/>
    <id>https://avery210412.github.io/javascript/20220401/1062980384/</id>
    <published>2022-03-31T18:00:00.000Z</published>
    <updated>2022-04-02T05:27:52.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算數運算子（math）"><a href="#算數運算子（math）" class="headerlink" title="算數運算子（math）"></a>算數運算子（math）</h2><p>加（<code>+</code>）、減（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、取餘數（<code>%</code>）</p><h2 id="邏輯運算子（logical）"><a href="#邏輯運算子（logical）" class="headerlink" title="邏輯運算子（logical）"></a>邏輯運算子（logical）</h2><ul><li><p>邏輯運算子常在 <code>if else</code> 條件式中和布林值（true or false）一起使用</p></li><li><p>在 JavaScript 中會被判定為 false 的值為：<code>0</code>、<code>&quot;&quot;</code>、<code>null</code>、<code>false</code>、<code>undefined</code>、<code>NaN</code></p></li></ul><h3 id="amp-amp-（and）"><a href="#amp-amp-（and）" class="headerlink" title="&amp;&amp;（and）"></a><code>&amp;&amp;</code>（and）</h3><p>所有條件都需要成立，才會回傳 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">false</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span>   <span class="comment">// false </span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span>   <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span>    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="（or）"><a href="#（or）" class="headerlink" title="||（or）"></a><code>||</code>（or）</h3><p>只要其中一個條件成立，就會回傳 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> || <span class="literal">false</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span>   <span class="comment">// true </span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span>   <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">true</span>    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="（not）"><a href="#（not）" class="headerlink" title="!（not）"></a><code>!</code>（not）</h3><p>將 true 轉換為 false，將 false 轉換為 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!<span class="literal">true</span>   <span class="comment">// false</span></span><br><span class="line">!<span class="literal">false</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="短路性質（short-circuit）"><a href="#短路性質（short-circuit）" class="headerlink" title="短路性質（short-circuit）"></a>短路性質（short-circuit）</h3><ul><li><p>除了 <code>true</code> 和 <code>false</code> 可以做邏輯運算外，數字也能做邏輯運算</p></li><li><p>在 Javascript 中，直覺<strong>沒有</strong>的東西就是 <code>false</code>，例如：<code>0</code>、<code>&#39;&#39;</code>、<code>false</code>、<code>null</code>、<code>undefined</code></p></li></ul><p>短路求值（short-circuit evaluation）：只有當第一個運算元（operator）的值無法確定邏輯運算的結果時，才對第二個運算元進行求值</p><ul><li><p>當 AND（<code>&amp;&amp;</code>） 的第一個運算元的值為 false 時，其結果必定為 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> &amp;&amp; <span class="number">10</span>  <span class="comment">// 0, short-circuit</span></span><br><span class="line"><span class="number">5</span> &amp;&amp; <span class="number">10</span>  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li><li><p>當 OR（<code>||</code>） 的第一個運算元為 true 時，最後結果必定為 true</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> || <span class="number">10</span>  <span class="comment">// 10</span></span><br><span class="line"><span class="number">5</span> || <span class="number">10</span>  <span class="comment">// 5, short-circuit</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="位元運算子（bitwise）"><a href="#位元運算子（bitwise）" class="headerlink" title="位元運算子（bitwise）"></a>位元運算子（bitwise）</h2><h3 id="二進制（binary）計數系統"><a href="#二進制（binary）計數系統" class="headerlink" title="二進制（binary）計數系統"></a>二進制（binary）計數系統</h3><p>儲存在計算機上的內容都為二進制代碼。二進制代碼由 0 和 1 組成，我們經常使用 Bytes 來儲存資料。 Byte 是由八個 bits 組成，可以儲存 0 到 255 之間的任何整數。</p><p><img src="https://i.imgur.com/qtM5YIP.png?1" alt="byte"></p><h3 id="lt-lt-（shift-left）"><a href="#lt-lt-（shift-left）" class="headerlink" title="&lt;&lt;（shift left）"></a><code>&lt;&lt;</code>（shift left）</h3><p><img src="https://www.101computing.net/wp/wp-content/uploads/binary-left-shift.png" alt="shift-left"></p><ul><li><p><code>n &lt;&lt; i</code>：n 乘以 2 的 i 次方</p><ul><li><p>n &lt;&lt; 1：往左移 1 位，如同 n * 2</p></li><li><p>n &lt;&lt; 2：往左移 2 位，如同 n * 4</p></li></ul></li></ul><h3 id="gt-gt-（shift-right）"><a href="#gt-gt-（shift-right）" class="headerlink" title="&gt;&gt;（shift right）"></a><code>&gt;&gt;</code>（shift right）</h3><p><img src="https://www.101computing.net/wp/wp-content/uploads/binary-right-shift.png" alt="shift-right"></p><ul><li><p><code>n &gt;&gt; i</code>：n 除以 2 的 i 次方（無法整除則餘數無條件捨去）</p><ul><li><p>n &gt;&gt; 1：往右移 1 位，如同 n &#x2F; 2</p></li><li><p>n &gt;&gt; 2：往右移 2 位，如同 n &#x2F; 4</p></li></ul></li></ul><h3 id="為何要使用位元的位移運算"><a href="#為何要使用位元的位移運算" class="headerlink" title="為何要使用位元的位移運算"></a>為何要使用位元的位移運算</h3><p>在效能上有所差異，因為電腦只認得二進制的機器碼，所以照理來說，同樣得出 <code>n * 2</code> 的運算結果，<code>n &lt;&lt; 1</code> 的計算會比 <code>n * 2</code> 還要來得快。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不要把位元運算子 <code>|</code>、<code>&amp;</code> 與邏輯運算子 <code>||</code>、<code>&amp;&amp;</code> 搞混，可以把位元運算子理解成 <strong>2 進位版的邏輯運算</strong>。</p><h3 id="amp-（AND）"><a href="#amp-（AND）" class="headerlink" title="&amp;（AND）"></a><code>&amp;</code>（AND）</h3><p>當成位元間的 <code>&amp;&amp;</code>，當兩個位元都是 1 時，回傳 1</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseAND_2x.png" alt="AND"></p><h4 id="遮罩應用"><a href="#遮罩應用" class="headerlink" title="遮罩應用"></a>遮罩應用</h4><p><img src="https://icarus.cs.weber.edu/~dab/cs1410/textbook/2.Core/images/and_mask.png" alt="mask"></p><p>把任意數字 n 跟 1 做 <code>&amp;</code> 位元運算會發生什麼事？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &amp; <span class="number">1</span> → <span class="number">1</span> ，代表 n 的最後 <span class="number">1</span> 個位元數（<span class="number">2</span>⁰）是 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n &amp; <span class="number">1</span> → <span class="number">0</span> ，代表 n 的最後 <span class="number">1</span> 個位元數（<span class="number">2</span>⁰）是 <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>n &amp; 1</code> 是判斷 n 為奇數或偶數的小技巧。除了使用 <code>n % 2</code>「取餘數」的傳統方式，<code>n &amp; 1</code> 是效能更好的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> &amp; <span class="number">1</span> → <span class="number">0</span>  <span class="comment">// even</span></span><br><span class="line"><span class="number">11</span> &amp; <span class="number">1</span> → <span class="number">1</span>  <span class="comment">// odd</span></span><br></pre></td></tr></table></figure><p>再把任意數字 n 跟 2的任意次方做 &amp; 位元運算會發生什麼事？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &amp; <span class="number">4</span> → <span class="number">1</span> ，代表 n 的倒數第 <span class="number">3</span> 個位元數（<span class="number">2</span>²）是 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n &amp; <span class="number">4</span> → <span class="number">0</span> ，代表 n 的倒數第 <span class="number">3</span> 個位元數（<span class="number">2</span>²）是 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>以此類推下去，有點類似<strong>遮罩</strong>的概念。</p><h3 id="（OR）"><a href="#（OR）" class="headerlink" title="|（OR）"></a><code>|</code>（OR）</h3><p>當成位元間的 <code>||</code>，其中一個位元是 1 時，回傳 1</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseOR_2x.png" alt="OR"></p><h3 id="（NOT）"><a href="#（NOT）" class="headerlink" title="~（NOT）"></a><code>~</code>（NOT）</h3><p>當位元是 1 時回傳 0，是 0 時回傳 1</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseNOT_2x.png" alt="NOT"></p><h3 id="（XOR）"><a href="#（XOR）" class="headerlink" title="^（XOR）"></a><code>^</code>（XOR）</h3><p>兩個位元相同時回傳 0，相異時回傳 1</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseXOR_2x.png" alt="XOR"></p><h2 id="遞增-x2F-遞減運算子"><a href="#遞增-x2F-遞減運算子" class="headerlink" title="遞增&#x2F;遞減運算子"></a>遞增&#x2F;遞減運算子</h2><h3 id="：遞增"><a href="#：遞增" class="headerlink" title="++：遞增"></a><code>++</code>：遞增</h3><p><code>++</code> 運算子的回傳值，取決於相對於運算元的位置。</p><ul><li><p>先遞增（++a）：在運算元<strong>之前</strong>，先執行變數遞增，再執行程式碼。</p></li><li><p>後遞增（a++）：在運算元<strong>之後</strong>，先執行程式碼，再執行變數遞增。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>, j = ++i  <span class="comment">//　i = 2, j = 2</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>, j = i++  <span class="comment">//　i = 2, j = 1　</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i++ &amp;&amp; <span class="number">10</span>, <span class="string">&quot;i = &quot;</span> + i)  <span class="comment">// 0 &#x27;i = 1&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. i &amp;&amp; 10 =&gt; 0</span></span><br><span class="line"><span class="comment">2. i++ =&gt; i = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++j &amp;&amp; <span class="number">10</span>, <span class="string">&quot;j = &quot;</span> + j)  <span class="comment">// 10 &#x27;j = 1&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. j++ =&gt; j = 1</span></span><br><span class="line"><span class="comment">2. j &amp;&amp; 10 =&gt; 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="：遞減"><a href="#：遞減" class="headerlink" title="--：遞減"></a><code>--</code>：遞減</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算數運算子（math）&quot;&gt;&lt;a href=&quot;#算數運算子（math）&quot; class=&quot;headerlink&quot; title=&quot;算數運算子（math）&quot;&gt;&lt;/a&gt;算數運算子（math）&lt;/h2&gt;&lt;p&gt;加（&lt;code&gt;+&lt;/code&gt;）、減（&lt;code&gt;-&lt;/code&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://avery210412.github.io/categories/javascript/"/>
    
    
    <category term="lidemy" scheme="https://avery210412.github.io/tags/lidemy/"/>
    
    <category term="javascript" scheme="https://avery210412.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[JS101] Node.js 環境建置</title>
    <link href="https://avery210412.github.io/javascript/20220401/1595818614/"/>
    <id>https://avery210412.github.io/javascript/20220401/1595818614/</id>
    <published>2022-03-31T17:00:00.000Z</published>
    <updated>2022-04-01T22:43:55.265Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 是一個程式語言，會有程式語言本身所規範可以用的東西，例如用 <code>var</code> 宣告變數，用 <code>if else</code> 進行條件判斷，或者是使用 <code>function</code> 宣告函式，這些東西都是 JavaScript 這個程式語言本身就有的部分。</p><p>既然上面說了「程式語言本身就有的部分」，就代表也有一些東西其實是「不屬於 JavaScript 這個程式語言的」。</p><p>例如 <code>document.querySelector(&#39;body&#39;)</code>，可以拿到 body 的 DOM 物件並且對它做操作，而操作之後會即時反應在瀏覽器的畫面上。</p><p>這個 <code>document</code> 是哪來的？其實是<strong>瀏覽器提供給 JavaScript 的</strong>，這樣才能讓 JavaScript 透過 <code>document</code> 這個物件與瀏覽器進行溝通來操控 DOM。</p><p>如果去翻 <strong>ECMAScript</strong> 的文件，會發現裡面完全沒有出現 <code>document</code> 這個東西，因為它不是這個程式語言本身的一部份，而是瀏覽器提供的東西。</p><p>如果在瀏覽器上面跑 JavaScript，可以<strong>把瀏覽器稱作是 JavaScript 的「執行環境（runtime）」</strong>，因為 JavaScript 就是在瀏覽器上執行，十分合理。</p><p>除了 <code>document</code> 以外，像是拿來計時的 <code>setTimeout</code> 與 <code>setInterval</code>，拿來做 ajax 的 <code>XMLHttpRequest</code> 與 <code>fetch</code>，這些都是瀏覽器這個執行環境所提供的東西。</p><p>除了瀏覽器以外，還有其他 JavaScript 的執行環境，就叫做 Node.js。</p><blockquote><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p></blockquote><p>所以 JavaScript 程式碼可以選擇跑在瀏覽器上，透過瀏覽器這個執行環境提供的東西操控畫面，或者是發 Request 出去；也可以選擇跑在 Node.js 這個執行環境上面，使用 Node.js 提供的東西。</p><p>那 Node.js 提供了什麼呢？例如 <code>fs</code>，全名為 <strong>file system</strong>，是控制檔案的介面，可以用 JavaScript 來讀寫電腦裡的檔案；還提供了 <code>http</code> 這個模組，可以用 JavaScript 來寫 server。</p><p>詳情請參考底下的示意圖：</p><p><img src="https://static.coderbridge.com/img/techbridge/images/huli/js-async/p1.png" alt="JavaScript runtime"></p><p>可以很清楚地看到當 JavaScript 在不同環境底下執行時，可以用的東西也不一樣，端看執行環境提供了什麼。</p><p>上圖中 <code>setTimeout</code> 在兩個環境都有出現，因為這兩個環境都覺得<strong>計時器</strong>這功能很重要，所以都提供了 <code>setTimeout</code> 這個函式給開發者使用。在兩個環境上的功能雖然是一模一樣的，但要注意的是<strong>因為執行環境不同，所以背後的實作方式以及原理也不同</strong>。</p><p>另外，執行環境不同，執行方式也會不同。以瀏覽器來說，是用 <code>&lt;script src=&quot;index.js&quot;&gt;</code> 去引入一個 JavaScript 檔案，就可以在瀏覽器上執行；以 Node.js 來說，必須先在電腦上安裝 Node.js 這個執行環境，然後以 CLI 的方式輸入 <code>node index.js</code> 這個指令來執行。</p><p>整理一下重點：</p><ol><li><p>JavaScript 只是一個程式語言，需要搭配<strong>執行環境</strong>提供的東西才能有效使用，例如：<code>setTiemout</code>、<code>document</code> 等</p></li><li><p>最常見的 JavaScript 執行環境有兩個，一個是瀏覽器，一個是 Node.js</p></li><li><p>不同的執行環境會提供不同的東西，例如：Node.js 提供了 <code>http</code> 這個模組讓 JavaScript 可以寫一個伺服器，但瀏覽器就沒有提供這種東西</p></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.huli.tw/2019/10/04/javascript-async-sync-and-callback/">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10191345">不只是瀏覽器！JavaScript 征服世界的第一步 - Node.js</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10242676">在不同 runtime 上執行的 JavaScript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript 是一個程式語言，會有程式語言本身所規範可以用的東西，例如用 &lt;code&gt;var&lt;/code&gt; 宣告變數，用 &lt;code&gt;if else&lt;/code&gt; 進行條件判斷，或者是使用 &lt;code&gt;function&lt;/code&gt; 宣告函式，這些東西都是 Java</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://avery210412.github.io/categories/javascript/"/>
    
    
    <category term="lidemy" scheme="https://avery210412.github.io/tags/lidemy/"/>
    
    <category term="javascript" scheme="https://avery210412.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
